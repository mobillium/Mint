//
//  Mint.swift
//  Mint
//
//  Created by Mustafa GUNES on 30.11.2019.
//  Copyright Â© 2019 Mustafa GUNES. All rights reserved.
//

import Foundation

class Mint {
    
    static func run() throws {
        
        let content = FileHandler.readFile()
        Logger.log(title: "CONTENTS", output: content)
        
        let lines = content.components(separatedBy: CharacterSet.newlines)
        Logger.log(title: "LINES", output: lines)
        
        let results = content.match(PATTERN)
        Logger.log(title: "RESULTS", output: results)
        
        var keyValues: [Translate] = []
        for result in results {
            let key = result[1]
            let value = result[2]
            let translate = Translate(key, value)
            keyValues.append(translate)
        }

        var mappedDict: [String: [String: String]] = [:]
        for keyValue in keyValues {
            let screenName = keyValue.getScreenName()
            let attributeName = keyValue.getAttributeName()
            let value = keyValue.value
            
            if mappedDict[screenName] == nil {
                mappedDict[screenName] = [:]
            }
            
            mappedDict[screenName]![attributeName] = value
            Logger.log(title: "MAPPEDKEYS", output: mappedDict)
        }
        
//        dict[mappedDict.keys] = mappedDict.values
        
        for map in mappedDict {
            Logger.log(title: nil, output: "- " + map.key)
            for mappedArr in map.value {
                Logger.log(title: nil, output: "-- " + mappedArr.value)
            }
        }
        
        // MARK: - scruct
        Logger.log(title: nil, output: mappedDict.values)
        try FileHandler.writeOutput(swift: Generator.generate(keyValues: mappedDict))
    }
}

public struct Generator {
    public static func generate(keyValues: [String: [String: String]]) -> String {
        var swift = "// This file is autogenerated by Mint from your localized strings file.\n\n"
        swift += "import Foundation\n\n"
        swift += "private class BundleLocator {\n"
        swift += "    static let bundle: Bundle = Bundle(for: BundleLocator.self)\n"
        swift += "}\n\n"
        swift += "struct Mint {\n\n"
//        for (index, value) in keyValues.enumerated() {
//            for key in keyValues {
//                swift += swiftFor(struct: keyValues.keys.first ?? "nil bu", keyValues: key.value)
//                swift += "\n\n"
//            }
//            if index < keyValues.count - 1 {
//                swift += "\n"
//            }
//        }
        for key in keyValues {
            for mappedArr in key.value {
                swift += swiftFor(struct: keyValues.keys.first ?? "nil", keyValues: key.value)
                swift += "\n\n"
            }
        }
        swift += "}\n"
        return swift
    }
    
    private static func swiftFor(struct aStruct: String, keyValues: [String: String]) -> String {
        var swift = "    struct \(aStruct) {"
        for key in keyValues {
            let lowercasedKey = key.key.lowercaseFirstCharacter()
            let nsLocalizedKey = "\(aStruct).\(key.key)"
            if let value = keyValues[nsLocalizedKey] {
                swift += "\n        /// \(value)"
            }
            swift += "\n        static let \(lowercasedKey) = NSLocalizedString(\"\(nsLocalizedKey)\", bundle: BundleLocator.bundle, comment: \"\")"
        }
        swift += "\n    }"
        return swift
    }
}
